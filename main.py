import openpyxl

import telebot
from telebot import types

from easydata2 import *

import datetime

DB_NAME = 'members'

#Forma_BI11_22042024

bot = telebot.TeleBot(get_id_data(DB_NAME, 'system')) 

def sync_first_biology_list(file, id):
    wb = openpyxl.load_workbook(filename=f'{file}.xlsx')
    active_sheet = wb['1']
    
    students_answers = get_item_data(DB_NAME, id, 'students_answers')
    students = list(students_answers.keys())
    print(f'–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {students}')
    
    props = {'D': '2', 'E': '2', 'F': '3', 'G': '4', 'H': '5', 'I': '9', 'J': '13'}
    
    for i in range(8, len(students) + 8):
        for l in ['D', 'E', 'F', 'G', 'H', 'I', 'J']: #2 2 3 4 5 9 13
            active_sheet[f'{l}{i}'] = students_answers[students[i - 8]][props[l]]
            print(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {l}{i}')
            print(f'–°—Ç—É–¥–µ–Ω—Ç: {students[i - 8]}')
            print(f'–ó–∞–¥–∞–Ω–∏–µ: {[props[l]]}')
            print(f'–û—Ç–≤–µ—Ç: {students_answers[students[i - 8]][props[l]]}')
    
    print('–°–æ—Ö—Ä–∞–Ω—è–µ–º...')
    wb.save(filename=f'{file}.xlsx')
    print('–ì–æ—Ç–æ–≤–æ!')
    
def sync_students_list(file, id):
    wb = openpyxl.load_workbook(filename=f'{file}.xlsx')
    active_sheet = wb['–°–ø–∏—Å–æ–∫']
    
    students_variants = get_item_data(DB_NAME, id, 'students_variants')
    students_notes = get_item_data(DB_NAME, id, 'students_notes')
    students = list(students_variants.keys())
    print(f'–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {students}')
    for i in range(8, len(students) + 8):
        print(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –í{i}')
        print(f'–°—Ç—É–¥–µ–Ω—Ç: {students[i - 8]}')
        active_sheet[f'B{i}'] = students[i - 8]
        
    for i in range(8, len(students) + 8):
        active_sheet[f'C{i}'] = int(students_variants[students[i - 8]])
        print(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: C{i}')
        print(f'–°—Ç—É–¥–µ–Ω—Ç: {students[i - 8]}')
        print(f'–í–∞—Ä–∏–∞–Ω—Ç: {students_variants[students[i - 8]]}')
        
    for i in range(8, len(students) + 8):
        active_sheet[f'D{i}'] = int(students_notes[students[i - 8]])
        print(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: D{i}')
        print(f'–°—Ç—É–¥–µ–Ω—Ç: {students[i - 8]}')
        print(f'–û—Ü–µ–Ω–∫–∞: {students_notes[students[i - 8]]}')
    
    print('–°–æ—Ö—Ä–∞–Ω—è–µ–º...')
    wb.save(filename=f'{file}_py.xlsx')
    print('–ì–æ—Ç–æ–≤–æ!')
        
@bot.message_handler(commands=['test'])
def test(message):
    sync_students_list('Forma_BI11_22042024', '5776829003')
    sync_first_biology_list('Forma_BI11_22042024_py', '5776829003')
    
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    btn2 = types.KeyboardButton('üì• –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    btn3 = types.KeyboardButton('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞')
    btn4 = types.KeyboardButton('üìï –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ—Ç—á–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –°—Ç–∞—Ç–ì—Ä–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def func(message):
    
    step = get_item_data(DB_NAME, str(message.from_user.id), 'step')
    license = get_item_data(DB_NAME, str(message.from_user.id), 'license')
        
    if message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞':
        bot.send_message(message.chat.id, text=f'–ò–∑-–∑–∞ –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ `2024` –≥–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ', parse_mode='Markdown')
        
        give_item_data(DB_NAME, str(message.from_user.id), 'license', datetime.datetime.now().strftime('%Y'))
    
    if message.text == 'üì• –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' and license == datetime.datetime.now().strftime('%Y'):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üíÇ‚Äç‚ôÇÔ∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫')
        btn2 = types.KeyboardButton('üåø –ë–∏–æ–ª–æ–≥–∏—è')
        markup.add(btn1, btn2)
        
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç', reply_markup=markup, parse_mode='Markdown')
        
        give_item_data(DB_NAME, str(message.from_user.id), 'step', 1)
        
    if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        license = get_item_data(DB_NAME, str(message.from_user.id), 'license')
        help_count = get_item_data(DB_NAME, str(message.from_user.id), 'count')
        license_a = 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if license != None else 'üî¥ –ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
        text = '**–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n'
        text += f'**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{message.from_user.id}`\n'
        text += f'**–õ–∏—Ü–µ–Ω–∑–∏—è:** `{license_a}`\n\n'
        text += f'**–ì–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏:** {license}\n'
        text += f'**–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {help_count}'
        
        
        bot.send_message(message.chat.id, text=text, parse_mode='Markdown')
    
    if message.text == 'üìï –ü–æ–º–æ—â—å':
        text = '–ü—Ä–∏–≤–µ—Ç! –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –°—Ç–∞—Ç–ì—Ä–∞–¥.'
        text = text + '\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –∞ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"'
        text = text + '\n–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∫–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –Ω–æ –∏ –∫–∞–∫ –æ–¥–Ω–∏–º –æ–≥—Ä–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≥–¥–µ —É—á–µ–Ω–∏–∫–∏ –∏–¥—É—Ç –≤ —Å—Ç–æ–ª–±–∏–∫'
        text = text + '\n–ï—Å–ª–∏ –≤ –ø–µ—Ä–µ—á–Ω–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É, –∞ —Ç–∞–∫ –∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ —Ç–∏–ø—É –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ü–µ–Ω–æ–∫ –∏–ª–∏ –Ω—é–∞–Ω—Å–æ–≤'
        
        bot.send_message(message.chat.id, text=text, parse_mode='Markdown')
        
    if step == 1 and message.text != 'üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥':
        if message.text in ['üåø –ë–∏–æ–ª–æ–≥–∏—è', 'üíÇ‚Äç‚ôÇÔ∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫']:
            give_item_data(DB_NAME, str(message.from_user.id), 'subject', message.text.split(' ', 1)[1])
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥')
        markup.add(btn1)
        
        bot.send_message(message.chat.id, text=f'–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç `{message.text}`', parse_mode='Markdown', reply_markup=markup)
    if step == 2 and message.text != 'üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥':
        students = get_item_data(DB_NAME, str(message.from_user.id), 'students_variants')
        
        if not students:
            students = {}
            
        students_notes = get_item_data(DB_NAME, str(message.from_user.id), 'students_notes')
        
        if not students_notes:
            students_notes = {}
            
        for student in message.text.split('\n'):
            
            if len(student.split('-')[0].split()) > 3:
                bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û - –í–∞—Ä–∏–∞–Ω—Ç - –û—Ü–µ–Ω–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥')
                return
        
            try:    
                students_notes[student.split('-', 2)[0].strip()] = student.split('-', 2)[2].strip()
                students[student.split('-', 2)[0].strip()] = student.split('-', 2)[1].strip()
            except:
                bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û - –í–∞—Ä–∏–∞–Ω—Ç - –û—Ü–µ–Ω–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥')
                return
            
            give_item_data(DB_NAME, str(message.from_user.id), 'students_notes', students_notes)
            give_item_data(DB_NAME, str(message.from_user.id), 'students_variants', students)
        
        variants_count = max(list(students.values()))
        students_count = len(list(students.keys()))
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥')
        markup.add(btn1)
        
        bot.send_message(message.chat.id, text=f'–ü–æ–ª—É—á–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {students_count}\n–í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {variants_count}', parse_mode='Markdown', reply_markup=markup)
    if step == 3 and message.text != 'üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥':
        answers = get_item_data(DB_NAME, str(message.from_user.id), 'answers')
        
        if answers == None:
            answers = {}
        
        answers_on_variant = {}
        
        answers_on_variant_list = message.text.split('\n')
        for answer in answers_on_variant_list:
            answers_on_variant[answers_on_variant_list.index(answer) + 1] = answer
            
        answers[len(list(answers.keys())) + 1] = answers_on_variant
        
        give_item_data(DB_NAME, str(message.from_user.id), 'answers', answers)
        
        
        variants_count = len(list(answers.keys()))

        bot.send_message(message.chat.id, text=f'–ü–æ–ª—É—á–µ–Ω–æ {variants_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', parse_mode='Markdown')
    if step == 4 and message.text != 'üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' and message.text != '‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å':
        students_variants = get_item_data(DB_NAME, str(message.from_user.id), 'students_variants')
        
        students_answers = get_item_data(DB_NAME, str(message.from_user.id), 'students_answers')
        
        if students_answers == None:
            students_answers = {}
        
        students_answers_on_variant = {}
        
        students_answers_on_variant_list = message.text.split('\n')
        for answer in students_answers_on_variant_list:
            students_answers_on_variant[students_answers_on_variant_list.index(answer) + 1] = answer
            
        students = list(students_variants.keys())
        
        try:
            student = students[len(list(students_answers.keys()))]
        except IndexError:
            bot.send_message(message.chat.id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ–≤—ã—Å–µ–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤')
            return
        
        students_answers[student] = students_answers_on_variant
        
        give_item_data(DB_NAME, str(message.from_user.id), 'students_answers', students_answers)
        
        
        students_count = len(list(students_answers.keys()))
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å')
        markup.add(btn1)

        bot.send_message(message.chat.id, text=f'–ü–æ–ª—É—á–µ–Ω —É—á–µ–Ω–∏–∫ {student}.\n–ü–æ–ª—É—á–µ–Ω–æ {students_count} —É—á–µ–Ω–∏–∫–æ–≤', parse_mode='Markdown', reply_markup=markup)
    if message.text == 'üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' or message.text == '‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å':
        
        if step == 1:
            bot.send_message(message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∏–¥—É—â–∏–π –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ç–∏—Ä–µ - —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –≤—Ç–æ—Ä–æ–µ - –æ—Ü–µ–Ω–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥. –í —ç—Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ –≤—ã –∏ –±—É–¥–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –º–Ω–µ –∏—Ö –æ—Ç–≤–µ—Ç—ã.', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='``–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞``', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤–∏—á - 1 - 5', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á - 2 - 3', parse_mode='Markdown')
        
        if step == 2:
            bot.send_message(message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –í–≤–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–æ–ª–±–∏–∫. –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç. –î–ª—è –≤–≤–æ–¥–∞ –≤ —Å—Ç–æ–ª–±–∏–∫ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SHIFT+ENTER', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='``–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞``', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='13\n232133\n–¥–µ–º–æ–∫—Ä–∞—Ç–∏—è\n122121', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='475\n212233\n—Å–æ—Ü–∏–∞–ª–∏–∑–º\n212121', parse_mode='Markdown')
        
        if step == 3:
            bot.send_message(message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤. –í–≤–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–æ–ª–±–∏–∫. –í–≤–æ–¥ —É—á–µ–Ω–∏–∫–æ–≤ —Å—Ç—Ä–æ–≥–æ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—Ö –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–≤–æ–¥–∏–ª–∏. –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–¥–∏–Ω —É—á–µ–Ω–∫–∏–∫. –î–ª—è –≤–≤–æ–¥–∞ –≤ —Å—Ç–æ–ª–±–∏–∫ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SHIFT+ENTER', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='``–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞``', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='13\n232133\n–¥–µ–º–æ–∫—Ä–∞—Ç–∏—è\n122121', parse_mode='Markdown')
            bot.send_message(message.chat.id, text='475\n212233\n—Å–æ—Ü–∏–∞–ª–∏–∑–º\n212121', parse_mode='Markdown')
            
            
        if step == 4:
            
            bot.send_message(message.chat.id, text='–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤', parse_mode='Markdown')
            give_item_data(DB_NAME, str(message.from_user.id), 'step', 0)
            
            give_item_data(DB_NAME, str(message.from_user.id), 'students_variants', None)
            give_item_data(DB_NAME, str(message.from_user.id), 'answers', None)
            give_item_data(DB_NAME, str(message.from_user.id), 'students_answers', None)
            give_item_data(DB_NAME, str(message.from_user.id), 'students_notes', None)
            
            start(message)
            return
            
        give_item_data(DB_NAME, str(message.from_user.id), 'step', int(step) + 1)

while True:
    print('Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω')
    bot.polling(none_stop=True, interval=0)